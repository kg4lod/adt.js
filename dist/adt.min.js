/*
 * adt.js - Algebraic Data Types for JavaScript
 * adt.js is free, public domain software (http://creativecommons.org/publicdomain/zero/1.0/)
 * Originally created by Rehno Lindeque of http://www.mischievousmeerkat.com
 */
var adt = (function() {
"use strict";
var init=function(a,b){var c,d,e;for(c=0;c<b.length;++c){var f=b[c];if(Array.isArray(f))init(a,f);else if(typeof f=="string"||typeof f=="number"){if(f!=="_"&&String(f).charAt(0)==="_")continue;a[f]=makeConstructor(f)}else{if(typeof f!="object"&&typeof f!="function")continue;for(d in f){if(d!=="_"&&d.charAt(0)==="_")continue;typeof f[d]=="function"?a[d]=f[d]:a[d]=function(){return f[d]}}}}},adt=function(){var a={};return init(a,arguments),evaluator(a)},makeConstructor=function(a){return function(){var b=[String(a)].concat([].slice.call(arguments,0));return b._ADTData=!0,b}},evaluator=function(a){var b,c=function(){return c.eval.apply(d,arguments)},d=Object.create(a);c.eval=function(a){if(typeof a=="string"||typeof a=="number"){var b;return d._key=d._pattern=a,typeof c[a]=="function"?b=c[a].apply(d,[].slice.call(arguments,1)):b=c._.apply(d,[].slice.call(arguments,1)),b}if(Array.isArray(a)&&a._ADTData===!0){var b=new Array(a.length),e="",f;b._ADTData=!0;for(f=1;f<a.length;++f){var g=Array.isArray(a[f])&&a[f]._ADTData===!0?c.eval(a[f]):a[f];Array.isArray(g)&&g._ADTData===!0?(e=e.concat(" ".concat(g[0])),b[f]=g):(e=e.concat(" ".concat(typeof g)),b[f]=g)}return b[0]=a[0],d._key=d._pattern=b[0],c.eval.apply(d,b)}return a};for(b in a)b!=="eval"&&(typeof a[b]=="function"?c[b]=function(b){return function(){return a[b].apply(d,arguments)}}(b):c[b]=function(b){return function(){return a[b]}}(b));return c};adt.constructors=function(a){var b,c=[];if(a!=null)for(b in a)c.push(b);return adt.apply(null,c)},adt.own=function(){var a,b,c,d,e,f={};for(a=0;a<arguments.length;++a){c=arguments[a],d=Object.getOwnPropertyNames(c);for(b=0;b<d.length;++b)e=d[b],f[e]=c[e]}return adt(f)},adt.own.constructors=function(a){var b,c=[];for(b=0;b<arguments.length;++b)c.push(Object.getOwnPropertyNames(arguments[b]));return adt.apply(null,Array.prototype.concat.apply([],c))},adt.deconstruct=function(a){return a&&a._ADTData===!0?{key:a[0],value:a.slice(1)}:{key:typeof a,value:a}},adt.serialize=function(){var a=adt("serialized",{_:function(){var a,b=this._key,c;for(a=0;a<arguments.length;++a)c=adt.deconstruct(arguments[a]),b+=" "+(c.key==="string"?'"'+c.value+'"':c.key==="serialized"?"("+c.value+")":String(c.value));return this.serialized(b)}});return String(adt.deconstruct(a.apply(a,arguments)).value)},adt.deserialize=function(a){var b=adt({"(":function(){console.log("(")},")":function(){console.log(")")},"[":function(){console.log("[")},",":function(){console.log(",")},"]":function(){console.log("]")},_:function(){}});return b(a)};  // Export adt to a CommonJS module if exports is available
  if (typeof(exports) !== "undefined" && exports !== null)
    exports.adt = adt;
  return adt;
})();

